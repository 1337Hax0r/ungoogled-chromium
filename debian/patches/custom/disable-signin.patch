description: Disables browser sign-in

--- a/components/signin/core/browser/signin_manager.cc
+++ b/components/signin/core/browser/signin_manager.cc
@@ -304,7 +304,7 @@ void SigninManager::OnGoogleServicesUsernamePatternChanged() {
 }
 
 bool SigninManager::IsSigninAllowed() const {
-  return signin_allowed_.GetValue();
+  return false;
 }
 
 void SigninManager::OnSigninAllowedPrefChanged() {
--- a/components/signin/core/browser/signin_manager_base.cc
+++ b/components/signin/core/browser/signin_manager_base.cc
@@ -104,7 +104,7 @@ void SigninManagerBase::Initialize(PrefService* local_state) {
 bool SigninManagerBase::IsInitialized() const { return initialized_; }
 
 bool SigninManagerBase::IsSigninAllowed() const {
-  return client_->GetPrefs()->GetBoolean(prefs::kSigninAllowed);
+  return false;
 }
 
 std::string SigninManagerBase::GetAuthenticatedUsername() const {
--- a/chrome/browser/ui/chrome_pages.cc
+++ b/chrome/browser/ui/chrome_pages.cc
@@ -66,12 +66,6 @@ void OpenBookmarkManagerWithHash(Browser* browser,
   ShowSingletonTabOverwritingNTP(browser, params);
 }
 
-void NavigateToSingletonTab(Browser* browser, const GURL& url) {
-  NavigateParams params(GetSingletonTabNavigateParams(browser, url));
-  params.path_behavior = NavigateParams::IGNORE_AND_NAVIGATE;
-  ShowSingletonTabOverwritingNTP(browser, params);
-}
-
 // Shows either the help app or the appropriate help page for |source|. If
 // |browser| is NULL and the help page is used (vs the app), the help page is
 // shown in the last active browser. If there is no such browser, a new browser
@@ -328,37 +322,6 @@ void ShowSearchEngineSettings(Browser* browser) {
 
 #if !defined(OS_ANDROID) && !defined(OS_IOS)
 void ShowBrowserSignin(Browser* browser, signin_metrics::Source source) {
-  Profile* original_profile = browser->profile()->GetOriginalProfile();
-  SigninManagerBase* manager =
-      SigninManagerFactory::GetForProfile(original_profile);
-  DCHECK(manager->IsSigninAllowed());
-  // If the browser's profile is an incognito profile, make sure to use
-  // a browser window from the original profile.  The user cannot sign in
-  // from an incognito window.
-  bool switched_browser = false;
-  scoped_ptr<ScopedTabbedBrowserDisplayer> displayer;
-  if (browser->profile()->IsOffTheRecord()) {
-    switched_browser = true;
-    displayer.reset(new ScopedTabbedBrowserDisplayer(
-        original_profile, chrome::HOST_DESKTOP_TYPE_NATIVE));
-    browser = displayer->browser();
-  }
-
-  signin_metrics::LogSigninSource(source);
-
-  // Since the app launcher is a separate application, it might steal focus
-  // away from Chrome, and accidentally close the avatar bubble. The same will
-  // happen if we had to switch browser windows to show the sign in page. In
-  // this case, fallback to the full-tab signin page.
-  if (switches::IsNewAvatarMenu() &&
-      source != signin_metrics::SOURCE_APP_LAUNCHER && !switched_browser) {
-    browser->window()->ShowAvatarBubbleFromAvatarButton(
-        BrowserWindow::AVATAR_BUBBLE_MODE_SIGNIN,
-        signin::ManageAccountsParams());
-  } else {
-    NavigateToSingletonTab(browser, GURL(signin::GetPromoURL(source, false)));
-    DCHECK_GT(browser->tab_strip_model()->count(), 0);
-  }
 }
 
 void ShowBrowserSigninOrSettings(

