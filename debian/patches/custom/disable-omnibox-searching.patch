description: Disables searching in the omnibox, hides search options, and disables automatic adding of search engines

--- a/components/omnibox/autocomplete_input.cc
+++ b/components/omnibox/autocomplete_input.cc
@@ -167,7 +167,7 @@ metrics::OmniboxInputType::Type AutocompleteInput::Parse(
   *canonicalized_url =
       url_fixer::FixupURL(base::UTF16ToUTF8(text), desired_tld);
   if (!canonicalized_url->is_valid())
-    return metrics::OmniboxInputType::QUERY;
+    return metrics::OmniboxInputType::URL;
 
   if (LowerCaseEqualsASCII(parsed_scheme_utf8, url::kFileScheme)) {
     // A user might or might not type a scheme when entering a file URL.  In
@@ -188,7 +188,7 @@ metrics::OmniboxInputType::Type AutocompleteInput::Parse(
     metrics::OmniboxInputType::Type type =
         scheme_classifier.GetInputTypeForScheme(parsed_scheme_utf8);
     if (type != metrics::OmniboxInputType::INVALID)
-      return type;
+      return metrics::OmniboxInputType::URL;
 
     // We don't know about this scheme.  It might be that the user typed a
     // URL of the form "username:password@foo.com".
@@ -238,7 +238,7 @@ metrics::OmniboxInputType::Type AutocompleteInput::Parse(
     // the option of treating it as a URL if we're wrong.
     // Note that SegmentURL() is smart so we aren't tricked by "c:\foo" or
     // "www.example.com:81" in this case.
-    return metrics::OmniboxInputType::UNKNOWN;
+    return metrics::OmniboxInputType::URL;
   }
 
   // Either the user didn't type a scheme, in which case we need to distinguish
@@ -250,7 +250,7 @@ metrics::OmniboxInputType::Type AutocompleteInput::Parse(
   // valid, non-standard URL; for standard URLs, an empty host would have
   // resulted in an invalid |canonicalized_url| above.)
   if (!canonicalized_url->has_host())
-    return metrics::OmniboxInputType::QUERY;
+    return metrics::OmniboxInputType::URL;
 
   // Determine the host family.  We get this information by (re-)canonicalizing
   // the already-canonicalized host rather than using the user's original input,
@@ -297,7 +297,7 @@ metrics::OmniboxInputType::Type AutocompleteInput::Parse(
     // without concrete evidence that doing so is necessary.
     return (parts->scheme.is_nonempty() ||
         (has_known_tld && (original_host.find(' ') == base::string16::npos))) ?
-        metrics::OmniboxInputType::UNKNOWN : metrics::OmniboxInputType::QUERY;
+        metrics::OmniboxInputType::URL : metrics::OmniboxInputType::URL;
   }
 
   // For hostnames that look like IP addresses, distinguish between IPv6
@@ -311,7 +311,7 @@ metrics::OmniboxInputType::Type AutocompleteInput::Parse(
     // IP with a non-zero first octet; IPs with first octet zero are "source
     // IPs" and are never navigable as destination addresses.
     if (host_info.address[0] == 0)
-      return metrics::OmniboxInputType::QUERY;
+      return metrics::OmniboxInputType::URL;
 
     // This is theoretically a navigable IP.  We have four cases.  The first
     // three are:
@@ -355,7 +355,7 @@ metrics::OmniboxInputType::Type AutocompleteInput::Parse(
   // scheme/trailing slash.
   if ((host_info.family == url::CanonHostInfo::IPV4) &&
       (host_info.num_ipv4_components > 1))
-    return metrics::OmniboxInputType::QUERY;
+    return metrics::OmniboxInputType::URL;
 
   // If there is more than one recognized non-host component, this is likely to
   // be a URL, even if the TLD is unknown (in which case this is likely an
@@ -369,7 +369,7 @@ metrics::OmniboxInputType::Type AutocompleteInput::Parse(
   // there _is_ a desired TLD, the user hit ctrl-enter, and we assume that
   // implies an attempted navigation.)
   if (canonicalized_url->has_username() && desired_tld.empty())
-    return metrics::OmniboxInputType::UNKNOWN;
+    return metrics::OmniboxInputType::URL;
 
   // If the host has a known TLD or a port, it's probably a URL.  Note that we
   // special-case "localhost" as a known hostname.
@@ -386,7 +386,7 @@ metrics::OmniboxInputType::Type AutocompleteInput::Parse(
   // returned URL.
   if (!parts->path.is_valid() && !canonicalized_url->has_query() &&
       canonicalized_url->has_ref())
-    return metrics::OmniboxInputType::QUERY;
+    return metrics::OmniboxInputType::URL;
 
   // No scheme, username, port, and no known TLD on the host.
   // This could be:
@@ -402,7 +402,7 @@ metrics::OmniboxInputType::Type AutocompleteInput::Parse(
   //   QUERY.  Since this is indistinguishable from the case above, and this
   //   case is much more likely, claim these are UNKNOWN, which should default
   //   to the right thing and let users correct us on a case-by-case basis.
-  return metrics::OmniboxInputType::UNKNOWN;
+  return metrics::OmniboxInputType::URL;
 }
 
 // static
--- a/chrome/browser/resources/options/browser_options.html
+++ b/chrome/browser/resources/options/browser_options.html
@@ -142,7 +142,7 @@
     </div>
   </section>
 </if>
-  <section>
+  <section hidden="hidden">
     <h3 i18n-content="sectionTitleSearch"></h3>
       <div id="search-section-content">
         <span id="default-search-engine-label"
--- a/chrome/browser/ui/chrome_pages.cc
+++ b/chrome/browser/ui/chrome_pages.cc
@@ -324,8 +324,6 @@ void ShowAboutChrome(Browser* browser) {
 }
 
 void ShowSearchEngineSettings(Browser* browser) {
-  content::RecordAction(UserMetricsAction("EditSearchEngines"));
-  ShowSettingsSubPage(browser, kSearchEnginesSubPage);
 }
 
 #if !defined(OS_ANDROID) && !defined(OS_IOS)
--- a/chrome/browser/prefs/chrome_pref_service_factory.cc
+++ b/chrome/browser/prefs/chrome_pref_service_factory.cc
@@ -33,7 +33,6 @@
 #include "chrome/browser/prefs/tracked/pref_hash_filter.h"
 #include "chrome/browser/profiles/file_path_verifier_win.h"
 #include "chrome/browser/profiles/profile.h"
-#include "chrome/browser/search_engines/default_search_pref_migration.h"
 #include "chrome/browser/sync/glue/sync_start_util.h"
 #include "chrome/browser/ui/profile_error_dialog.h"
 #include "chrome/common/chrome_constants.h"
@@ -531,8 +530,6 @@ scoped_ptr<PrefServiceSyncable> CreateProfilePrefs(
   scoped_ptr<PrefServiceSyncable> pref_service =
       factory.CreateSyncable(pref_registry.get());
 
-  ConfigureDefaultSearchPrefMigrationToDictionaryValue(pref_service.get());
-
   return pref_service.Pass();
 }
 
--- a/chrome/chrome_browser.gypi
+++ b/chrome/chrome_browser.gypi
@@ -2457,8 +2457,6 @@
     'chrome_browser_search_engines_sources': [
       'browser/search_engines/chrome_template_url_service_client.cc',
       'browser/search_engines/chrome_template_url_service_client.h',
-      'browser/search_engines/default_search_pref_migration.cc',
-      'browser/search_engines/default_search_pref_migration.h',
       'browser/search_engines/search_provider_install_data.cc',
       'browser/search_engines/search_provider_install_data.h',
       'browser/search_engines/search_provider_install_state_message_filter.cc',
--- a/components/search_engines/template_url_service.cc
+++ b/components/search_engines/template_url_service.cc
@@ -1862,6 +1862,8 @@ bool TemplateURLService::ApplyDefaultSearchChangeNoMetrics(
 bool TemplateURLService::AddNoNotify(TemplateURL* template_url,
                                      bool newly_adding) {
   DCHECK(template_url);
+  delete template_url;
+  return false;
 
   if (newly_adding) {
     DCHECK_EQ(kInvalidTemplateURLID, template_url->id());
--- a/components/search_engines/default_search_manager.cc
+++ b/components/search_engines/default_search_manager.cc
@@ -27,7 +27,7 @@
 
 namespace {
 
-bool g_fallback_search_engines_disabled = false;
+bool g_fallback_search_engines_disabled = true;
 
 }  // namespace
 
@@ -150,7 +150,7 @@ DefaultSearchManager::GetDefaultSearchEngineSource() const {
 
 void DefaultSearchManager::SetUserSelectedDefaultSearchEngine(
     const TemplateURLData& data) {
-  if (!pref_service_) {
+  if (true) {
     prefs_default_search_.reset(new TemplateURLData(data));
     MergePrefsDataWithPrepopulated();
     NotifyObserver();
@@ -256,6 +256,7 @@ void DefaultSearchManager::OnOverridesPrefChanged() {
 }
 
 void DefaultSearchManager::MergePrefsDataWithPrepopulated() {
+  return;
   if (!prefs_default_search_ || !prefs_default_search_->prepopulate_id)
     return;
 
@@ -294,6 +295,8 @@ void DefaultSearchManager::LoadDefaultSearchEngineFromPrefs() {
   DCHECK(pref);
   default_search_controlled_by_policy_ = pref->IsManaged();
 
+  return;
+
   const base::DictionaryValue* url_dict =
       pref_service_->GetDictionary(kDefaultSearchProviderDataPrefName);
   if (url_dict->empty())
