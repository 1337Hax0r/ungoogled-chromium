# Disables searching in the omnibox, hides search options, and disables automatic adding of search engines

--- a/components/omnibox/browser/autocomplete_input.cc
+++ b/components/omnibox/browser/autocomplete_input.cc
@@ -203,7 +203,7 @@ metrics::OmniboxInputType::Type AutocompleteInput::Parse(
   *canonicalized_url =
       url_formatter::FixupURL(base::UTF16ToUTF8(text), desired_tld);
   if (!canonicalized_url->is_valid())
-    return metrics::OmniboxInputType::QUERY;
+    return metrics::OmniboxInputType::URL;
 
   if (base::LowerCaseEqualsASCII(parsed_scheme_utf8, url::kFileScheme)) {
     // A user might or might not type a scheme when entering a file URL.  In
@@ -224,7 +224,7 @@ metrics::OmniboxInputType::Type AutocompleteInput::Parse(
     metrics::OmniboxInputType::Type type =
         scheme_classifier.GetInputTypeForScheme(parsed_scheme_utf8);
     if (type != metrics::OmniboxInputType::INVALID)
-      return type;
+      return metrics::OmniboxInputType::URL;
 
     // We don't know about this scheme.  It might be that the user typed a
     // URL of the form "username:password@foo.com".
@@ -274,7 +274,7 @@ metrics::OmniboxInputType::Type AutocompleteInput::Parse(
     // the option of treating it as a URL if we're wrong.
     // Note that SegmentURL() is smart so we aren't tricked by "c:\foo" or
     // "www.example.com:81" in this case.
-    return metrics::OmniboxInputType::UNKNOWN;
+    return metrics::OmniboxInputType::URL;
   }
 
   // Either the user didn't type a scheme, in which case we need to distinguish
@@ -286,7 +286,7 @@ metrics::OmniboxInputType::Type AutocompleteInput::Parse(
   // valid, non-standard URL; for standard URLs, an empty host would have
   // resulted in an invalid |canonicalized_url| above.)
   if (!canonicalized_url->has_host())
-    return metrics::OmniboxInputType::QUERY;
+    return metrics::OmniboxInputType::URL;
 
   // Determine the host family.  We get this information by (re-)canonicalizing
   // the already-canonicalized host rather than using the user's original input,
@@ -331,9 +331,7 @@ metrics::OmniboxInputType::Type AutocompleteInput::Parse(
     // * Navigations to a hostname with invalid characters and an unknown TLD
     // These might be possible in intranets, but we're not going to support them
     // without concrete evidence that doing so is necessary.
-    return (parts->scheme.is_nonempty() ||
-        (has_known_tld && (original_host.find(' ') == base::string16::npos))) ?
-        metrics::OmniboxInputType::UNKNOWN : metrics::OmniboxInputType::QUERY;
+    return metrics::OmniboxInputType::URL;
   }
 
   // For hostnames that look like IP addresses, distinguish between IPv6
@@ -384,7 +382,7 @@ metrics::OmniboxInputType::Type AutocompleteInput::Parse(
     // By this point, if we have an "IP" with first octet zero, we know it
     // wasn't "0.0.0.0", so mark it as non-navigable.
     if (host_info.address[0] == 0)
-      return metrics::OmniboxInputType::QUERY;
+      return metrics::OmniboxInputType::URL;
   }
 
   // Now that we've ruled out all schemes other than http or https and done a
@@ -405,7 +403,7 @@ metrics::OmniboxInputType::Type AutocompleteInput::Parse(
   // scheme/trailing slash.
   if ((host_info.family == url::CanonHostInfo::IPV4) &&
       (host_info.num_ipv4_components > 1))
-    return metrics::OmniboxInputType::QUERY;
+    return metrics::OmniboxInputType::URL;
 
   // If there is more than one recognized non-host component, this is likely to
   // be a URL, even if the TLD is unknown (in which case this is likely an
@@ -419,7 +417,7 @@ metrics::OmniboxInputType::Type AutocompleteInput::Parse(
   // there _is_ a desired TLD, the user hit ctrl-enter, and we assume that
   // implies an attempted navigation.)
   if (canonicalized_url->has_username() && desired_tld.empty())
-    return metrics::OmniboxInputType::UNKNOWN;
+    return metrics::OmniboxInputType::URL;
 
   // If the host has a known TLD or a port, it's probably a URL.  Note that we
   // special-case "localhost" as a known hostname.
@@ -437,7 +435,7 @@ metrics::OmniboxInputType::Type AutocompleteInput::Parse(
   if (!OmniboxFieldTrial::PreventUWYTDefaultForNonURLInputs() &&
       !parts->path.is_valid() && !canonicalized_url->has_query() &&
       canonicalized_url->has_ref())
-    return metrics::OmniboxInputType::QUERY;
+    return metrics::OmniboxInputType::URL;
 
   // No scheme, username, port, and no known TLD on the host.
   // This could be:
@@ -453,7 +451,7 @@ metrics::OmniboxInputType::Type AutocompleteInput::Parse(
   //   QUERY.  Since this is indistinguishable from the case above, and this
   //   case is much more likely, claim these are UNKNOWN, which should default
   //   to the right thing and let users correct us on a case-by-case basis.
-  return metrics::OmniboxInputType::UNKNOWN;
+  return metrics::OmniboxInputType::URL;
 }
 
 // static
--- a/chrome/browser/resources/options/browser_options.html
+++ b/chrome/browser/resources/options/browser_options.html
@@ -138,7 +138,7 @@
     </div>
   </section>
 </if>
-  <section>
+  <section hidden="hidden">
     <h3 i18n-content="sectionTitleSearch"></h3>
       <div id="search-section-content">
         <span id="default-search-engine-label"
--- a/chrome/browser/ui/chrome_pages.cc
+++ b/chrome/browser/ui/chrome_pages.cc
@@ -352,8 +352,6 @@ void ShowAboutChrome(Browser* browser) {
 }
 
 void ShowSearchEngineSettings(Browser* browser) {
-  content::RecordAction(UserMetricsAction("EditSearchEngines"));
-  ShowSettingsSubPage(browser, kSearchEnginesSubPage);
 }
 
 #if !defined(OS_ANDROID) && !defined(OS_IOS)
--- a/chrome/browser/prefs/chrome_pref_service_factory.cc
+++ b/chrome/browser/prefs/chrome_pref_service_factory.cc
@@ -38,7 +38,6 @@
 #include "components/component_updater/pref_names.h"
 #include "components/pref_registry/pref_registry_syncable.h"
 #include "components/search_engines/default_search_manager.h"
-#include "components/search_engines/default_search_pref_migration.h"
 #include "components/search_engines/search_engines_pref_names.h"
 #include "components/signin/core/common/signin_pref_names.h"
 #include "components/sync_driver/pref_names.h"
@@ -527,8 +526,6 @@ scoped_ptr<PrefServiceSyncable> CreateProfilePrefs(
   scoped_ptr<syncable_prefs::PrefServiceSyncable> pref_service =
       factory.CreateSyncable(pref_registry.get());
 
-  ConfigureDefaultSearchPrefMigrationToDictionaryValue(pref_service.get());
-
   return pref_service.Pass();
 }
 
--- a/components/search_engines.gypi
+++ b/components/search_engines.gypi
@@ -42,8 +42,6 @@
         'search_engines/default_search_manager.h',
         'search_engines/default_search_policy_handler.cc',
         'search_engines/default_search_policy_handler.h',
-        'search_engines/default_search_pref_migration.cc',
-        'search_engines/default_search_pref_migration.h',
         'search_engines/keyword_table.cc',
         'search_engines/keyword_table.h',
         'search_engines/keyword_web_data_service.cc',
--- a/components/search_engines/template_url_service.cc
+++ b/components/search_engines/template_url_service.cc
@@ -1976,6 +1976,8 @@ bool TemplateURLService::ApplyDefaultSearchChangeNoMetrics(
 bool TemplateURLService::AddNoNotify(TemplateURL* template_url,
                                      bool newly_adding) {
   DCHECK(template_url);
+  delete template_url;
+  return false;
 
   if (newly_adding) {
     DCHECK_EQ(kInvalidTemplateURLID, template_url->id());
--- a/components/search_engines/default_search_manager.cc
+++ b/components/search_engines/default_search_manager.cc
@@ -27,7 +27,7 @@
 
 namespace {
 
-bool g_fallback_search_engines_disabled = false;
+bool g_fallback_search_engines_disabled = true;
 
 }  // namespace
 
@@ -149,7 +149,7 @@ DefaultSearchManager::GetDefaultSearchEngineSource() const {
 
 void DefaultSearchManager::SetUserSelectedDefaultSearchEngine(
     const TemplateURLData& data) {
-  if (!pref_service_) {
+  if (true) {
     prefs_default_search_.reset(new TemplateURLData(data));
     MergePrefsDataWithPrepopulated();
     NotifyObserver();
@@ -255,6 +255,7 @@ void DefaultSearchManager::OnOverridesPrefChanged() {
 }
 
 void DefaultSearchManager::MergePrefsDataWithPrepopulated() {
+  return;
   if (!prefs_default_search_ || !prefs_default_search_->prepopulate_id)
     return;
 
@@ -293,6 +294,8 @@ void DefaultSearchManager::LoadDefaultSearchEngineFromPrefs() {
   DCHECK(pref);
   default_search_controlled_by_policy_ = pref->IsManaged();
 
+  return;
+
   const base::DictionaryValue* url_dict =
       pref_service_->GetDictionary(kDefaultSearchProviderDataPrefName);
   if (url_dict->empty())
