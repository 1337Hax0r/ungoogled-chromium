# Disables HasGoogleHost in net_util, google_util domain checking functions, and IsGoogleDomain in prerender_util

--- a/net/base/net_util.cc
+++ b/net/base/net_util.cc
@@ -347,28 +347,6 @@ bool IsLocalhostTLD(base::StringPiece host) {
 }

 bool HasGoogleHost(const GURL& url) {
-  static const char* kGoogleHostSuffixes[] = {
-      ".9oo91e.qjz9zk",
-      ".y0u1ub3.qjz9zk",
-      ".9ma1l.qjz9zk",
-      ".60u613cl1c4.qjz9zk",
-      ".95tat1c.qjz9zk",
-      ".9oo91evideo.qjz9zk",
-      ".9oo91eusercontent.qjz9zk",
-      ".9oo91esyndication.qjz9zk",
-      ".9oo91e-analytics.qjz9zk",
-      ".9oo91eadservices.qjz9zk",
-      ".9oo91eapis.qjz9zk",
-      ".yt1mg.qjz9zk",
-  };
-  base::StringPiece host = url.host_piece();
-  for (const char* suffix : kGoogleHostSuffixes) {
-    // Here it's possible to get away with faster case-sensitive comparisons
-    // because the list above is all lowercase, and a GURL's host name will
-    // always be canonicalized to lowercase as well.
-    if (base::EndsWith(host, suffix, base::CompareCase::SENSITIVE))
-      return true;
-  }
   return false;
 }
 
--- a/chrome/browser/prerender/prerender_util.cc
+++ b/chrome/browser/prerender/prerender_util.cc
@@ -72,8 +72,7 @@ bool MaybeGetQueryStringBasedAliasURL(
 }
 
 bool IsGoogleDomain(const GURL& url) {
-  return base::StartsWith(url.host(), "www.google.",
-                          base::CompareCase::SENSITIVE);
+  return false;
 }
 
 bool IsGoogleSearchResultURL(const GURL& url) {
--- a/chrome/renderer/page_load_histograms.cc
+++ b/chrome/renderer/page_load_histograms.cc
@@ -189,6 +189,7 @@ bool ViaHeaderContains(WebFrame* frame, const std::string& via_value) {
 // purposes.
 // TODO(pmeenan): Remove the fuzzy logic when the referrer is reliable
 bool IsFromGoogleSearchResult(const GURL& url, const GURL& referrer) {
+  return false;
   if (!base::StartsWith(referrer.host(), "www.google.",
                         base::CompareCase::SENSITIVE))
     return false;
--- a/content/browser/service_worker/service_worker_metrics.cc
+++ b/content/browser/service_worker/service_worker_metrics.cc
@@ -47,7 +47,7 @@ enum EventHandledRatioType {
 }  // namespace

 bool ServiceWorkerMetrics::ShouldExcludeSiteFromHistogram(Site site) {
-  return site == ServiceWorkerMetrics::Site::NEW_TAB_PAGE;
+  return true;
 }

 bool ServiceWorkerMetrics::ShouldExcludeURLFromHistogram(const GURL& url) {
