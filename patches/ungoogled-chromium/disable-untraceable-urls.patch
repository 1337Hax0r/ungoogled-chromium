description: Disable additional URLs that are not caught by the "trk" scheme

--- a/chrome/browser/plugins/plugins_resource_service.cc
+++ b/chrome/browser/plugins/plugins_resource_service.cc
@@ -23,9 +23,6 @@ const int kStartResourceFetchDelayMs = 60 * 1000;
 // Delay between calls to update the cache 1 day and 2 minutes in testing mode.
 const int kCacheUpdateDelayMs = 24 * 60 * 60 * 1000;

-const char kPluginsServerUrl[] =
-    "https://www.95tat1c.qjz9zk/chrome/config/plugins_2/";
-
 GURL GetPluginsServerURL() {
   std::string filename;
 #if defined(OS_WIN)
@@ -38,7 +35,7 @@ GURL GetPluginsServerURL() {
 #error Unknown platform
 #endif

-  return GURL(kPluginsServerUrl + filename);
+  return GURL("about:blank");
 }

 }  // namespace
--- a/chrome/browser/safe_browsing/client_side_model_loader.cc
+++ b/chrome/browser/safe_browsing/client_side_model_loader.cc
@@ -30,8 +30,6 @@ namespace safe_browsing {
 // Model Loader strings
 const size_t ModelLoader::kMaxModelSizeBytes = 150 * 1024;
 const int ModelLoader::kClientModelFetchIntervalMs = 3600 * 1000;
-const char ModelLoader::kClientModelUrlPrefix[] =
-    "https://ssl.95tat1c.qjz9zk/safebrowsing/csd/";
 const char ModelLoader::kClientModelNamePattern[] =
     "client_model_v5%s_variation_%d.pb";
 const char ModelLoader::kClientModelFinchExperiment[] =
@@ -84,7 +82,7 @@ ModelLoader::ModelLoader(base::Closure update_renderers_callback,
                          net::URLRequestContextGetter* request_context_getter,
                          bool is_extended_reporting)
     : name_(FillInModelName(is_extended_reporting, GetModelNumber())),
-      url_(kClientModelUrlPrefix + name_),
+      url_("about:blank"),
       update_renderers_callback_(update_renderers_callback),
       request_context_getter_(request_context_getter),
       weak_factory_(this) {
@@ -95,7 +93,7 @@ ModelLoader::ModelLoader(base::Closure update_renderers_callback,
 ModelLoader::ModelLoader(base::Closure update_renderers_callback,
                          const std::string& model_name)
     : name_(model_name),
-      url_(kClientModelUrlPrefix + name_),
+      url_("about:blank"),
       update_renderers_callback_(update_renderers_callback),
       request_context_getter_(NULL),
       weak_factory_(this) {
--- a/chrome/browser/safe_browsing/client_side_model_loader.h
+++ b/chrome/browser/safe_browsing/client_side_model_loader.h
@@ -44,7 +44,6 @@ class ModelLoader : public net::URLFetcherDelegate {
   static const int kClientModelFetchIntervalMs;
   static const char kClientModelFinchExperiment[];
   static const char kClientModelFinchParam[];
-  static const char kClientModelUrlPrefix[];
   static const char kClientModelNamePattern[];

   ModelLoader(base::Closure update_renderers,
--- a/rlz/lib/lib_values.cc
+++ b/rlz/lib/lib_values.cc
@@ -41,7 +41,6 @@ const char kSetDccResponseVariable[] = "set_dcc";
 //

 const char kFinancialPingPath[] = "/tools/pso/ping";
-const char kFinancialServer[]   = "clients1.9oo91e.qjz9zk";
 const int kFinancialPort = 80;

 // Ping times in 100-nanosecond intervals.
--- a/rlz/lib/lib_values.h
+++ b/rlz/lib/lib_values.h
@@ -71,7 +71,6 @@ extern const char kSetDccResponseVariable[];
 //

 extern const char kFinancialPingPath[];
-extern const char kFinancialServer[];

 extern const int kFinancialPort;

--- a/rlz/lib/financial_ping.cc
+++ b/rlz/lib/financial_ping.cc
@@ -249,7 +249,7 @@ bool FinancialPing::PingServer(const char* request, std::string* response) {

   // Open network connection.
   InternetHandle connection_handle = InternetConnectA(inet_handle,
-      kFinancialServer, kFinancialPort, "", "", INTERNET_SERVICE_HTTP,
+      "about:blank", kFinancialPort, "", "", INTERNET_SERVICE_HTTP,
       INTERNET_FLAG_NO_CACHE_WRITE, 0);
   if (!connection_handle)
     return false;
@@ -310,7 +310,7 @@ bool FinancialPing::PingServer(const char* request, std::string* response) {
   FinancialPingUrlFetcherDelegate delegate(loop.QuitClosure());

   std::string url = base::StringPrintf("http://%s:%d%s",
-                                       kFinancialServer, kFinancialPort,
+                                       "about:blank", kFinancialPort,
                                        request);

   scoped_ptr<net::URLFetcher> fetcher =

