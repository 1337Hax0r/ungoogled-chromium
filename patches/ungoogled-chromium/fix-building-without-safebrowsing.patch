description: Fix building with safe browsing disabled

--- a/chrome/browser/chrome_content_browser_client.cc
+++ b/chrome/browser/chrome_content_browser_client.cc
@@ -565,10 +565,10 @@ class SafeBrowsingSSLCertReporter : public SSLCertReporter {
   // SSLCertReporter implementation
   void ReportInvalidCertificateChain(
       const std::string& serialized_report) override {
-    if (safe_browsing_ui_manager_) {
-      safe_browsing_ui_manager_->ReportInvalidCertificateChain(
-          serialized_report, base::Bind(&base::DoNothing));
-    }
+    //if (safe_browsing_ui_manager_) {
+    //  safe_browsing_ui_manager_->ReportInvalidCertificateChain(
+    //      serialized_report, base::Bind(&base::DoNothing));
+    //}
   }

  private:
@@ -1943,11 +1943,11 @@ void ChromeContentBrowserClient::AllowCertificateError(
   if (expired_previous_decision)
     options_mask |= SSLBlockingPage::EXPIRED_BUT_PREVIOUSLY_ALLOWED;

-  SafeBrowsingService* safe_browsing_service =
-      g_browser_process->safe_browsing_service();
+  //SafeBrowsingService* safe_browsing_service =
+  //    g_browser_process->safe_browsing_service();
   scoped_ptr<SafeBrowsingSSLCertReporter> cert_reporter(
-      new SafeBrowsingSSLCertReporter(safe_browsing_service
-                                          ? safe_browsing_service->ui_manager()
+      new SafeBrowsingSSLCertReporter(false
+                                          ? nullptr
                                           : nullptr));
   SSLErrorHandler::HandleSSLError(tab, cert_error, ssl_info, request_url,
                                   options_mask, cert_reporter.Pass(), callback);
--- a/chrome/browser/profiles/profile_impl.cc
+++ b/chrome/browser/profiles/profile_impl.cc
@@ -446,12 +446,12 @@ ProfileImpl::ProfileImpl(
       path_, sequenced_task_runner, create_mode == CREATE_MODE_SYNCHRONOUS);
 #endif
 
-  scoped_refptr<SafeBrowsingService> safe_browsing_service(
-      g_browser_process->safe_browsing_service());
-  if (safe_browsing_service.get()) {
-    pref_validation_delegate_ =
-        safe_browsing_service->CreatePreferenceValidationDelegate(this).Pass();
-  }
+  //scoped_refptr<SafeBrowsingService> safe_browsing_service(
+  //    g_browser_process->safe_browsing_service());
+  //if (safe_browsing_service.get()) {
+  //  pref_validation_delegate_ =
+  //      safe_browsing_service->CreatePreferenceValidationDelegate(this).Pass();
+  //}
 
   {
     prefs_ = chrome_prefs::CreateProfilePrefs(
--- a/chrome/browser/renderer_host/chrome_resource_dispatcher_host_delegate.cc
+++ b/chrome/browser/renderer_host/chrome_resource_dispatcher_host_delegate.cc
@@ -319,8 +319,8 @@ void ChromeResourceDispatcherHostDelegate::RequestBeginning(
     content::AppCacheService* appcache_service,
     ResourceType resource_type,
     ScopedVector<content::ResourceThrottle>* throttles) {
-  if (safe_browsing_.get())
-    safe_browsing_->OnResourceRequest(request);
+  //if (safe_browsing_.get())
+  //  safe_browsing_->OnResourceRequest(request);
 
   const ResourceRequestInfo* info = ResourceRequestInfo::ForRequest(request);
   bool is_prerendering =
--- a/chrome/browser/ui/webui/interstitials/interstitial_ui.cc
+++ b/chrome/browser/ui/webui/interstitials/interstitial_ui.cc
@@ -173,7 +173,7 @@ BadClockBlockingPage* CreateBadClockBlockingPage(
                                   request_url, time_triggered_, nullptr,
                                   base::Callback<void(bool)>());
 }
-
+/*
 SafeBrowsingBlockingPage* CreateSafeBrowsingBlockingPage(
     content::WebContents* web_contents) {
   SBThreatType threat_type = SB_THREAT_TYPE_URL_MALWARE;
@@ -215,7 +215,7 @@ SafeBrowsingBlockingPage* CreateSafeBrowsingBlockingPage(
       web_contents,
       resource);
 }
-
+*/
 #if defined(ENABLE_CAPTIVE_PORTAL_DETECTION)
 CaptivePortalBlockingPage* CreateCaptivePortalBlockingPage(
     content::WebContents* web_contents) {
@@ -304,9 +304,11 @@ void InterstitialHTMLSource::StartDataRequest(
   scoped_ptr<content::InterstitialPageDelegate> interstitial_delegate;
   if (base::StartsWith(path, "ssl", base::CompareCase::SENSITIVE)) {
     interstitial_delegate.reset(CreateSSLBlockingPage(web_contents_));
+  /*
   } else if (base::StartsWith(path, "safebrowsing",
                               base::CompareCase::SENSITIVE)) {
     interstitial_delegate.reset(CreateSafeBrowsingBlockingPage(web_contents_));
+  */
   } else if (base::StartsWith(path, "clock", base::CompareCase::SENSITIVE)) {
     interstitial_delegate.reset(CreateBadClockBlockingPage(web_contents_));
   }
--- a/chrome/browser/extensions/blacklist_state_fetcher.cc
+++ b/chrome/browser/extensions/blacklist_state_fetcher.cc
@@ -35,10 +35,10 @@ BlacklistStateFetcher::~BlacklistStateFetcher() {
 void BlacklistStateFetcher::Request(const std::string& id,
                                     const RequestCallback& callback) {
   DCHECK_CURRENTLY_ON(BrowserThread::UI);
-  if (!safe_browsing_config_) {
-    if (g_browser_process && g_browser_process->safe_browsing_service()) {
-      SetSafeBrowsingConfig(
-          g_browser_process->safe_browsing_service()->GetProtocolConfig());
+  if (true) {
+    if (false) {
+      //SetSafeBrowsingConfig(
+      //    g_browser_process->safe_browsing_service()->GetProtocolConfig());
     } else {
       base::ThreadTaskRunnerHandle::Get()->PostTask(
           FROM_HERE, base::Bind(callback, BLACKLISTED_UNKNOWN));
@@ -51,11 +51,11 @@ void BlacklistStateFetcher::Request(const std::string& id,
   if (request_already_sent)
     return;
 
-  if (!url_request_context_getter_ && g_browser_process &&
-      g_browser_process->safe_browsing_service()) {
-    url_request_context_getter_ =
-        g_browser_process->safe_browsing_service()->url_request_context();
-  }
+  //if (!url_request_context_getter_ && g_browser_process &&
+  //    g_browser_process->safe_browsing_service()) {
+  //  url_request_context_getter_ =
+  //      g_browser_process->safe_browsing_service()->url_request_context();
+  //}
 
   SendRequest(id);
 }
@@ -79,10 +79,10 @@ void BlacklistStateFetcher::SendRequest(const std::string& id) {
   fetcher->Start();
 }
 
-void BlacklistStateFetcher::SetSafeBrowsingConfig(
-    const SafeBrowsingProtocolConfig& config) {
-  safe_browsing_config_.reset(new SafeBrowsingProtocolConfig(config));
-}
+//void BlacklistStateFetcher::SetSafeBrowsingConfig(
+//    const SafeBrowsingProtocolConfig& config) {
+//  safe_browsing_config_.reset(new SafeBrowsingProtocolConfig(config));
+//}
 
 void BlacklistStateFetcher::SetURLRequestContextForTest(
       net::URLRequestContextGetter* request_context) {
@@ -90,6 +90,7 @@ void BlacklistStateFetcher::SetURLRequestContextForTest(
 }
 
 GURL BlacklistStateFetcher::RequestUrl() const {
+  /*
   std::string url = base::StringPrintf(
       "%s/%s?client=%s&appver=%s&pver=2.2",
       safe_browsing_config_->url_prefix.c_str(),
@@ -101,7 +102,8 @@ GURL BlacklistStateFetcher::RequestUrl() const {
     base::StringAppendF(&url, "&key=%s",
                         net::EscapeQueryParamValue(api_key, true).c_str());
   }
-  return GURL(url);
+  */
+  return GURL();
 }
 
 void BlacklistStateFetcher::OnURLFetchComplete(const net::URLFetcher* source) {
--- a/chrome/browser/extensions/blacklist_state_fetcher.h
+++ b/chrome/browser/extensions/blacklist_state_fetcher.h
@@ -32,7 +32,7 @@ class BlacklistStateFetcher : public net::URLFetcherDelegate {
 
   virtual void Request(const std::string& id, const RequestCallback& callback);
 
-  void SetSafeBrowsingConfig(const SafeBrowsingProtocolConfig& config);
+  //void SetSafeBrowsingConfig(const SafeBrowsingProtocolConfig& config);
 
   void SetURLRequestContextForTest(
       net::URLRequestContextGetter* request_context);
@@ -51,7 +51,7 @@ class BlacklistStateFetcher : public net::URLFetcherDelegate {
   // ID for URLFetchers for testing.
   int url_fetcher_id_;
 
-  scoped_ptr<SafeBrowsingProtocolConfig> safe_browsing_config_;
+  //scoped_ptr<SafeBrowsingProtocolConfig> safe_browsing_config_;
   scoped_refptr<net::URLRequestContextGetter> url_request_context_getter_;
   scoped_refptr<net::URLRequestContextGetter> parent_request_context_for_test_;
 
